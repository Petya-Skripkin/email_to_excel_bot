import imaplib
import email
import pandas as pd
import time
from email.header import decode_header
from config import EMAIL, PASSWORD, IMAP_SERVER, FOLDER, CHECK_INTERVAL


def fetch_emails():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –∏–∑ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞."""
    try:
        mail = imaplib.IMAP4_SSL(IMAP_SERVER, 993)
 #       mail.debug = 4
        mail.login(EMAIL, PASSWORD)
        mail.select(FOLDER)

        print(123)

        _, messages = mail.search(None, "UNSEEN")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ (–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ) –ø–∏—Å—å–º–∞
        messages = messages[0].split()

        if not messages:
            return []

        data_list = []
        for msg_id in messages:
            _, msg_data = mail.fetch(msg_id, "(RFC822)")
            for response_part in msg_data:
                if isinstance(response_part, tuple):
                    msg = email.message_from_bytes(response_part[1])

                    subject, encoding = decode_header(msg["Subject"])[0]
                    if isinstance(subject, bytes):
                        subject = subject.decode(encoding or "utf-8")

                    sender = msg.get("From", "")
                    body = extract_body(msg)

                    data = parse_email(body)
                    if data:
                        data_list.append(data)

        mail.logout()
        return data_list  

    except imaplib.IMAP4.error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ IMAP: {e}")
        return []


def extract_body(msg):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–∏—Å—å–º–∞ (—Ç–æ–ª—å–∫–æ text/plain)."""
    body = ""
    if msg.is_multipart():
        for part in msg.walk():
            if part.get_content_type() == "text/plain":
                try:
                    body = part.get_payload(decode=True).decode("utf-8")
                except UnicodeDecodeError:
                    body = part.get_payload(decode=True).decode("latin-1")
                break
    else:
        try:
            body = msg.get_payload(decode=True).decode("utf-8")
        except UnicodeDecodeError:
            body = msg.get_payload(decode=True).decode("latin-1")

    return body.strip()


def parse_email(body):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞"""
    data = {}
    fields = ["message", "name", "company", "email", "theme"]
    lines = body.split("\n")
    
    print("üì© –ò—Å—Ö–æ–¥–Ω–æ–µ —Ç–µ–ª–æ –ø–∏—Å—å–º–∞:")
    print(body)  # –í—ã–≤–µ–¥–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    for line in lines:
        if ":" in line:
            key, value = line.split(":", 1)
            key, value = key.strip(), value.strip()
            if key in fields:
                data[key] = value

    print("üìä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)  # –í—ã–≤–µ–¥–µ—Ç, –∫–∞–∫–∏–µ –ø–æ–ª—è —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    return {field: data.get(field, "") for field in fields}



def save_to_excel(data_list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª (–¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)."""
    if not data_list:
        return

    try:
        existing_df = pd.read_excel("emails.xlsx")
        df = pd.DataFrame(data_list)
        df = pd.concat([existing_df, df], ignore_index=True)
    except FileNotFoundError:
        df = pd.DataFrame(data_list)

    df.to_excel("emails.xlsx", index=False)
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(data_list)} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤ emails.xlsx")


def monitor_emails():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–æ—Å–æ–º."""
    print("üì© –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏—Å–µ–º –∑–∞–ø—É—â–µ–Ω...")

    while True:
        new_emails = fetch_emails()
        
        if new_emails:
            print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(new_emails)} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º!")
            save_to_excel(new_emails)
        else:
            print("üì≠ –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º –Ω–µ—Ç...")

        time.sleep(CHECK_INTERVAL)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
